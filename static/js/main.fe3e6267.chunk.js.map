{"version":3,"sources":["components/TableRow.jsx","components/DebtInput.jsx","components/Table.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["TableRow","rowData","id","creditorName","firstName","lastName","minPaymentPercentage","balance","checked","handleRowCheckbox","formatedMinPayment","Number","toFixed","formatedBalance","className","type","onChange","DebtInput","handleDebtSave","debtFields","uuid","useState","debtInputValue","setDebtInputValue","checkboxStatus","setCheckboxStatus","handleInputChange","e","target","name","value","disabled","Object","keys","slice","map","debtField","key","onClick","Table","tableData","setTableData","addingDebt","setAddingDebt","headerCheckbox","setHeaderCheckbox","useEffect","fetch","then","res","json","data","forEach","newTableData","row","console","log","debtData","isNaN","remainingTableData","filter","total","countCheckedBalance","toString","replace","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe3e6267.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function TableRow({\n  rowData: {\n    id,\n    creditorName,\n    firstName,\n    lastName,\n    minPaymentPercentage,\n    balance,\n    checked,\n  },\n  handleRowCheckbox,\n}) {\n  const formatedMinPayment = `${Number(minPaymentPercentage).toFixed(2)}%`;\n  const formatedBalance = Number(balance).toFixed(2);\n\n  return (\n    <>\n      <tr className=\"table-row\">\n        <td className=\"checkbox-td\">\n          <input\n            type=\"checkbox\"\n            checked={checked}\n            onChange={() => handleRowCheckbox(id)}\n          />\n        </td>\n        <td>{creditorName}</td>\n        <td>{firstName}</td>\n        <td>{lastName}</td>\n        <td className=\"text-right\">{formatedMinPayment}</td>\n        <td className=\"text-right\">{formatedBalance}</td>\n      </tr>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport uuid from \"react-uuid\";\n\nexport default function DebtInput({ handleDebtSave }) {\n  const debtFields = {\n    id: uuid(),\n    creditorName: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    minPaymentPercentage: \"\",\n    balance: \"\",\n  };\n  const [debtInputValue, setDebtInputValue] = useState(debtFields);\n  const [checkboxStatus, setCheckboxStatus] = useState(true);\n\n  const handleInputChange = (e) => {\n    setDebtInputValue({ ...debtInputValue, [e.target.name]: e.target.value });\n  };\n\n  const handleDebtSaveClick = () => {\n    handleDebtSave(debtInputValue);\n    setCheckboxStatus(false);\n  };\n\n  return (\n    <tr>\n      <td className=\"checkbox-td\">\n        <input type=\"checkbox\" disabled={checkboxStatus} />\n      </td>\n      {Object.keys(debtFields)\n        .slice(1)\n        .map((debtField) => {\n          return (\n            <td key={debtField}>\n              <input\n                value={debtInputValue[debtField]}\n                type=\"text\"\n                name={debtField}\n                onChange={handleInputChange}\n              />\n            </td>\n          );\n        })}\n      <td className=\"button-save-td\">\n        <button onClick={handleDebtSaveClick}>Save</button>\n      </td>\n    </tr>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport TableRow from \"./TableRow\";\nimport DebtInput from \"./DebtInput\";\n\nexport default function Table() {\n  //state\n  const [tableData, setTableData] = useState([]);\n  const [addingDebt, setAddingDebt] = useState(false);\n  const [headerCheckbox, setHeaderCheckbox] = useState(false);\n\n  useEffect(() => {\n    fetch(\n      \"https://raw.githubusercontent.com/StrategicFS/Recruitment/master/data.json\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        data.forEach((rowData) => (rowData.checked = false));\n        setTableData(data);\n      });\n  }, []);\n\n  const handleAddDebt = () => {\n    setAddingDebt(true);\n  };\n\n  const handleRemoveDebt = () => {\n    let remainingTableData = tableData.filter((rowData) => !rowData.checked);\n    setTableData(remainingTableData);\n  };\n\n  const handleDebtSave = (debtData) => {\n    debtData.balance = !isNaN(Number(debtData.balance))\n      ? Number(debtData.balance)\n      : 0;\n    debtData.minPaymentPercentage = isNaN(Number(debtData.minPaymentPercentage))\n      ? debtData.minPaymentPercentage.slice(0, -1)\n      : debtData.minPaymentPercentage;\n    debtData.checked = false;\n    setTableData([...tableData, debtData]);\n    setAddingDebt(false);\n  };\n\n  const handleHeaderCheckbox = () => {\n    tableData.forEach((rowData) => (rowData.checked = !headerCheckbox));\n    setHeaderCheckbox(!headerCheckbox);\n    setTableData(tableData);\n  };\n\n  const handleRowCheckbox = (id) => {\n    let newTableData = tableData.map((row) => {\n      if (row.id === id) row.checked = !row.checked;\n      return row;\n    });\n    setTableData(newTableData);\n  };\n\n  const countCheckedbox = () => {\n    return tableData.filter((row) => row.checked).length;\n  };\n\n  const countCheckedBalance = () => {\n    let total = 0;\n    tableData.forEach((row) => {\n      if (row.checked) total += row.balance;\n    });\n    return total;\n  };\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th className=\"checkbox-th\">\n              <input\n                type=\"checkbox\"\n                checked={headerCheckbox}\n                onChange={handleHeaderCheckbox}\n              />\n            </th>\n            <th>Creditor</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th className=\"text-right\">Min Pay%</th>\n            <th className=\"text-right\">Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {console.log(tableData)}\n          {tableData.map((rowData) => {\n            return (\n              <TableRow\n                key={rowData.id}\n                rowData={rowData}\n                handleRowCheckbox={handleRowCheckbox}\n              />\n            );\n          })}\n          {addingDebt && <DebtInput handleDebtSave={handleDebtSave} />}\n        </tbody>\n      </table>\n      <button onClick={handleAddDebt}>Add Debt</button>\n      <button onClick={handleRemoveDebt}>Remove Debt</button>\n      <div className=\"total-checked-debt\">\n        <div>Total</div>\n        <div>\n          {`$${countCheckedBalance()\n            .toFixed(2)\n            .toString()\n            .replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\")} `}\n        </div>\n      </div>\n      <div>\n        <span className=\"total-row-count\">{`Total Row Count: ${tableData.length}`}</span>\n        <span>{`Check Row Count: ${countCheckedbox()} `}</span>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport Table from \"./Table\";\n\nfunction App() {\n  return <Table />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}